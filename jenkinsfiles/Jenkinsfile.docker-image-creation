pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = "webapp-hello-world"
        DOCKERHUB_USERNAME = "karanthakkar09"
    }

    stages {
        stage('Semantic Git Release') {
            steps {
                script {
                    sh 'npm install'

                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                        def output = sh(script: "npx semantic-release", returnStdout: true).trim()
                        echo "semantic-release output:\n${output}"

                        def versionLine = output.split('\n').find { it.toLowerCase().contains("the next release version is") }
                        if (versionLine) {
                            env.APP_VERSION = versionLine.split(' ').last()
                            echo "New version set: ${env.APP_VERSION}"
                        } else {
                            error "Failed to find the release version in the output."
                        }
                    }
                }
            }
        }

        stage('Build Docker Builder Image') {
            steps {
                script {
                    sh """
                        docker buildx create --name mybuilder --use
                        docker buildx inspect --bootstrap
                    """
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh """
                        echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                        docker buildx build \
                            --platform linux/amd64,linux/arm64 \
                            -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.APP_VERSION} \
                            -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest \
                            --push .
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                sh """
                    docker buildx rm mybuilder || true
                    docker system prune -f
                    docker logout
                """
                cleanWs()
            }
        }
        success {
            echo "Pipeline completed successfully! Docker image ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.APP_VERSION} pushed to Docker Hub."
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
